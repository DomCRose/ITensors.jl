## Misc To Do

+ Finish recursive step of recursiveSVD function; test accuracy
  (Also try V-normalization idea for optimizing)

+ davidson improvements
  - evaluate logic (cyclic permutation of order of steps in main for loop?)
  - improve definitions and handling of parameters such as miniter, maxiter

+ Reduce dependencies 
  - Permutations (let's remove)
  - KrylovKit (let's remove)
  - Combinatorics (requires ImageMagick; let's move to test-only dependency or remove)
  - QuadGK (let's move to test-only)

+ MPS/MPO algorithms

+ Boson site set

+ Fancier AutoMPO interface
  Ideas:
  1. ampo += "J Sz_{i} Sz_{i+1}" (using Meta.parse and eval)
  2. ampo += J*"Sz"(i)*"Sz"(i+1) (using operator overloading)
  3. define a macro @autompo or similar

+ QN Index

+ QN block-sparse tensors (with separate block-sparse library as discussed)

+ QN version of AutoMPO

+ Split site sets, AutoMPO into separate ITensor physics package?


## Performance Issues

## Design Questions

+ Should we rename methods like storage_svd etc. to just svd?
  Arguments for changing:
    - could use storage objects better in generic algorithms
      (e.g. put a Dense{Float64} object into a Krylov library routine)
    - hard to draw line between which functions are "storage_func" or just "func"
  Arguments for status quo:
    - makes code more readable in some ways
    - easier to see which methods to overload to make a new storage type
      (but we can address this by listing such methods in the docs)

## Optimization Ideas

+ Mimic "small vector" / "InfArray" optimization used in C++ ITensor.
  This optimization makes IndexSets not allocate on the heap until 
  the number of indices exceeds a certain size. Use a stack-allocated / non-allocating
  fixed-size array or tuple to hold indices below that size.

## Final Release Checks

+ Make sure installation is clean on a brand new Julia install (no libraries at all)
+ Ensure dependencies are the true minimum amount
